<?php

declare(strict_types=1);

namespace App\Tests\Shared\Infrastructure\Provider;

use App\PullRequest\Domain\Aggregate\PullRequest\PullRequest;
use App\PullRequest\Domain\Aggregate\PullRequest\PullRequestId;
use App\Shared\Infrastructure\Provider\TranslationsCatalogProvider;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\HttpClient\MockHttpClient;
use Symfony\Component\HttpClient\Response\MockResponse;
use Symfony\Contracts\Cache\CacheInterface;

class TranslationsCatalogProviderTest extends KernelTestCase
{
    private CacheInterface $cache;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        /** @var CacheInterface $cache */
        $cache = self::bootKernel()->getContainer()->get('cache.app');
        $this->cache = $cache;
    }

    public function testGetTranslationsCatalog(): void
    {
        $httpClient = new MockHttpClient(
            new MockResponse("<source>key1</source>\n<source>key2</source>")
        );
        $catalogProvider = new TranslationsCatalogProvider($httpClient, $this->cache);
        $keys = $catalogProvider->getTranslationsCatalog('en', 'Admin.Test');

        $this->assertContains('key1', $keys);
        $this->assertContains('key2', $keys);
    }

    public function testGetTranslationsCatalog404(): void
    {
        $httpClient = new MockHttpClient(
            new MockResponse('', ['http_code' => 404])
        );
        $catalogProvider = new TranslationsCatalogProvider($httpClient, $this->cache);
        $keys = $catalogProvider->getTranslationsCatalog('en', 'Admin.Test2');
        $this->assertEquals(0, count($keys));
    }

    /**
     * @dataProvider provideTestGetCatalogVersionByPullRequest
     */
    public function testGetCatalogVersionByPullRequest(PullRequest $pullRequest, int $expectingCatalogVersion): void
    {
        $httpClient = new MockHttpClient();
        $catalogProvider = new TranslationsCatalogProvider($httpClient, $this->cache);
        $this->assertEquals($expectingCatalogVersion, $catalogProvider->getCatalogVersionByPullRequest($pullRequest));
    }

    /**
     * @return array<array<PullRequest|int>>
     */
    public static function provideTestGetCatalogVersionByPullRequest(): array
    {
        return [
            [
                PullRequest::create(
                    id: new PullRequestId(
                        repositoryOwner: 'owner',
                        repositoryName: 'name',
                        pullRequestNumber: '1'
                    ),
                    labels: ['label'],
                    approvals: [],
                    targetBranch: 'main'
                ),
                9,
            ],
            [
                PullRequest::create(
                    id: new PullRequestId(
                        repositoryOwner: 'PrestaShop',
                        repositoryName: 'PrestaShop',
                        pullRequestNumber: '1'
                    ),
                    labels: ['label'],
                    approvals: [],
                    targetBranch: 'develop'
                ),
                9,
            ],
            [
                PullRequest::create(
                    id: new PullRequestId(
                        repositoryOwner: 'PrestaShop',
                        repositoryName: 'PrestaShop',
                        pullRequestNumber: '1'
                    ),
                    labels: ['label'],
                    approvals: [],
                    targetBranch: '8.1.X'
                ),
                8,
            ],
            [
                PullRequest::create(
                    id: new PullRequestId(
                        repositoryOwner: 'PrestaShop',
                        repositoryName: 'WrongRepositoryName',
                        pullRequestNumber: '1'
                    ),
                    labels: ['label'],
                    approvals: [],
                    targetBranch: '8.1.X'
                ),
                9,
            ],
        ];
    }
}
